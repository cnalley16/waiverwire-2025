
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  profileImage: 'profileImage',
  timezone: 'timezone',
  isActive: 'isActive',
  emailVerified: 'emailVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeagueScalarFieldEnum = {
  id: 'id',
  name: 'name',
  password: 'password',
  customUrl: 'customUrl',
  commissionerId: 'commissionerId',
  maxTeams: 'maxTeams',
  isActive: 'isActive',
  isPaid: 'isPaid',
  entryFee: 'entryFee',
  prizeAmount: 'prizeAmount',
  draftType: 'draftType',
  draftDate: 'draftDate',
  seasonStartWeek: 'seasonStartWeek',
  leagueStartDate: 'leagueStartDate',
  rosterDeadline: 'rosterDeadline',
  maxAddsPerSeason: 'maxAddsPerSeason',
  maxAddsPerWeek: 'maxAddsPerWeek',
  tradeRejectTime: 'tradeRejectTime',
  tradeEndDate: 'tradeEndDate',
  waiverTime: 'waiverTime',
  commissionerMessage: 'commissionerMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeagueSettingsScalarFieldEnum = {
  id: 'id',
  leagueId: 'leagueId',
  scoringType: 'scoringType',
  hasDivisions: 'hasDivisions',
  playoffTeams: 'playoffTeams',
  playoffStartWeek: 'playoffStartWeek',
  canTradeDraftPicks: 'canTradeDraftPicks',
  tradeReviewType: 'tradeReviewType',
  waiverType: 'waiverType',
  cantCutList: 'cantCutList',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScoringSettingsScalarFieldEnum = {
  id: 'id',
  leagueId: 'leagueId',
  passingYards: 'passingYards',
  passingTds: 'passingTds',
  passingInts: 'passingInts',
  rushingYards: 'rushingYards',
  rushingTds: 'rushingTds',
  receivingYards: 'receivingYards',
  receivingTds: 'receivingTds',
  receptions: 'receptions',
  fumbles: 'fumbles',
  fieldGoals: 'fieldGoals',
  extraPoints: 'extraPoints',
  sacks: 'sacks',
  interceptions: 'interceptions',
  fumbleRecoveries: 'fumbleRecoveries',
  safeties: 'safeties',
  defensiveTds: 'defensiveTds',
  pointsAllowed0: 'pointsAllowed0',
  pointsAllowed1to6: 'pointsAllowed1to6',
  pointsAllowed7to13: 'pointsAllowed7to13',
  pointsAllowed14to20: 'pointsAllowed14to20',
  pointsAllowed21to27: 'pointsAllowed21to27',
  pointsAllowed28plus: 'pointsAllowed28plus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RosterSettingsScalarFieldEnum = {
  id: 'id',
  leagueId: 'leagueId',
  qbSlots: 'qbSlots',
  rbSlots: 'rbSlots',
  wrSlots: 'wrSlots',
  teSlots: 'teSlots',
  flexSlots: 'flexSlots',
  kSlots: 'kSlots',
  defSlots: 'defSlots',
  benchSlots: 'benchSlots',
  irSlots: 'irSlots',
  maxRosterSize: 'maxRosterSize',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  leagueId: 'leagueId',
  ownerId: 'ownerId',
  name: 'name',
  logoUrl: 'logoUrl',
  wins: 'wins',
  losses: 'losses',
  ties: 'ties',
  totalPoints: 'totalPoints',
  isActive: 'isActive',
  waiverPriority: 'waiverPriority',
  transactionCount: 'transactionCount',
  paidEntry: 'paidEntry',
  amountOwed: 'amountOwed',
  amountPaid: 'amountPaid',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlayerScalarFieldEnum = {
  id: 'id',
  externalId: 'externalId',
  firstName: 'firstName',
  lastName: 'lastName',
  position: 'position',
  team: 'team',
  number: 'number',
  byeWeek: 'byeWeek',
  isActive: 'isActive',
  injuryStatus: 'injuryStatus',
  injuryNote: 'injuryNote',
  imageUrl: 'imageUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RosterScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  playerId: 'playerId',
  position: 'position',
  isStarter: 'isStarter',
  acquiredDate: 'acquiredDate',
  weekAdded: 'weekAdded'
};

exports.Prisma.DraftScalarFieldEnum = {
  id: 'id',
  leagueId: 'leagueId',
  draftType: 'draftType',
  draftDate: 'draftDate',
  isComplete: 'isComplete',
  currentRound: 'currentRound',
  currentPick: 'currentPick',
  timePerPick: 'timePerPick',
  draftOrder: 'draftOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DraftPickScalarFieldEnum = {
  id: 'id',
  draftId: 'draftId',
  teamId: 'teamId',
  userId: 'userId',
  playerId: 'playerId',
  round: 'round',
  pick: 'pick',
  pickInRound: 'pickInRound',
  pickTime: 'pickTime',
  isKeeper: 'isKeeper',
  createdAt: 'createdAt'
};

exports.Prisma.GameScalarFieldEnum = {
  id: 'id',
  leagueId: 'leagueId',
  homeTeamId: 'homeTeamId',
  awayTeamId: 'awayTeamId',
  week: 'week',
  season: 'season',
  homeScore: 'homeScore',
  awayScore: 'awayScore',
  isComplete: 'isComplete',
  isPlayoffs: 'isPlayoffs',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  leagueId: 'leagueId',
  teamId: 'teamId',
  userId: 'userId',
  playerId: 'playerId',
  transactionType: 'transactionType',
  week: 'week',
  description: 'description',
  isProcessed: 'isProcessed',
  processedAt: 'processedAt',
  createdAt: 'createdAt'
};

exports.Prisma.TradeOfferScalarFieldEnum = {
  id: 'id',
  leagueId: 'leagueId',
  offeringTeamId: 'offeringTeamId',
  targetTeamId: 'targetTeamId',
  offererId: 'offererId',
  targetId: 'targetId',
  status: 'status',
  note: 'note',
  expiresAt: 'expiresAt',
  respondedAt: 'respondedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TradeOfferPlayerScalarFieldEnum = {
  id: 'id',
  tradeOfferId: 'tradeOfferId',
  playerId: 'playerId',
  fromTeam: 'fromTeam'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  leagueId: 'leagueId',
  senderId: 'senderId',
  recipientId: 'recipientId',
  subject: 'subject',
  content: 'content',
  messageType: 'messageType',
  isRead: 'isRead',
  readAt: 'readAt',
  createdAt: 'createdAt'
};

exports.Prisma.GameStatsScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  week: 'week',
  season: 'season',
  passingYards: 'passingYards',
  passingTds: 'passingTds',
  passingInts: 'passingInts',
  passingAttempts: 'passingAttempts',
  rushingYards: 'rushingYards',
  rushingTds: 'rushingTds',
  rushingAttempts: 'rushingAttempts',
  receptions: 'receptions',
  receivingYards: 'receivingYards',
  receivingTds: 'receivingTds',
  targets: 'targets',
  fumbles: 'fumbles',
  fumblesLost: 'fumblesLost',
  fieldGoalsMade: 'fieldGoalsMade',
  fieldGoalsAttempted: 'fieldGoalsAttempted',
  extraPointsMade: 'extraPointsMade',
  extraPointsAttempted: 'extraPointsAttempted',
  sacks: 'sacks',
  interceptions: 'interceptions',
  fumbleRecoveries: 'fumbleRecoveries',
  safeties: 'safeties',
  defensiveTds: 'defensiveTds',
  pointsAllowed: 'pointsAllowed',
  fantasyPoints: 'fantasyPoints',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WeeklyProjectionScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  week: 'week',
  season: 'season',
  projectedPoints: 'projectedPoints',
  confidence: 'confidence',
  projPassingYards: 'projPassingYards',
  projPassingTds: 'projPassingTds',
  projRushingYards: 'projRushingYards',
  projRushingTds: 'projRushingTds',
  projReceptions: 'projReceptions',
  projReceivingYards: 'projReceivingYards',
  projReceivingTds: 'projReceivingTds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.DraftType = exports.$Enums.DraftType = {
  LIVE_ONLINE: 'LIVE_ONLINE',
  LIVE_OFFLINE: 'LIVE_OFFLINE',
  AUTOMATED: 'AUTOMATED'
};

exports.ScoringType = exports.$Enums.ScoringType = {
  BASIC: 'BASIC',
  PERFORMANCE: 'PERFORMANCE'
};

exports.TradeReviewType = exports.$Enums.TradeReviewType = {
  NONE: 'NONE',
  COMMISSIONER: 'COMMISSIONER',
  LEAGUE_VOTE: 'LEAGUE_VOTE'
};

exports.WaiverType = exports.$Enums.WaiverType = {
  REVERSE_STANDINGS: 'REVERSE_STANDINGS',
  ROLLING: 'ROLLING',
  FAAB: 'FAAB'
};

exports.Position = exports.$Enums.Position = {
  QB: 'QB',
  RB: 'RB',
  WR: 'WR',
  TE: 'TE',
  K: 'K',
  DEF: 'DEF',
  DL: 'DL',
  LB: 'LB',
  DB: 'DB'
};

exports.InjuryStatus = exports.$Enums.InjuryStatus = {
  HEALTHY: 'HEALTHY',
  QUESTIONABLE: 'QUESTIONABLE',
  DOUBTFUL: 'DOUBTFUL',
  OUT: 'OUT',
  IR: 'IR',
  PUP: 'PUP'
};

exports.RosterPosition = exports.$Enums.RosterPosition = {
  QB: 'QB',
  RB: 'RB',
  WR: 'WR',
  TE: 'TE',
  FLEX: 'FLEX',
  K: 'K',
  DEF: 'DEF',
  BENCH: 'BENCH',
  IR: 'IR'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  ADD: 'ADD',
  DROP: 'DROP',
  TRADE: 'TRADE',
  WAIVER_CLAIM: 'WAIVER_CLAIM'
};

exports.TradeStatus = exports.$Enums.TradeStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED'
};

exports.MessageType = exports.$Enums.MessageType = {
  PERSONAL: 'PERSONAL',
  LEAGUE_WIDE: 'LEAGUE_WIDE',
  SYSTEM: 'SYSTEM',
  TRADE_OFFER: 'TRADE_OFFER',
  COMMISSIONER: 'COMMISSIONER'
};

exports.Prisma.ModelName = {
  User: 'User',
  League: 'League',
  LeagueSettings: 'LeagueSettings',
  ScoringSettings: 'ScoringSettings',
  RosterSettings: 'RosterSettings',
  Team: 'Team',
  Player: 'Player',
  Roster: 'Roster',
  Draft: 'Draft',
  DraftPick: 'DraftPick',
  Game: 'Game',
  Transaction: 'Transaction',
  TradeOffer: 'TradeOffer',
  TradeOfferPlayer: 'TradeOfferPlayer',
  Message: 'Message',
  GameStats: 'GameStats',
  WeeklyProjection: 'WeeklyProjection'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
